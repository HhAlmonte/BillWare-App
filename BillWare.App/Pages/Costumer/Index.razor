@page "/costumer/index"

@inject ICostumerService _costumerService;
@inject DialogService DialogService;

<h3>Cliente</h3>

<hr />

<RadzenButton Text="AGREGAR" class="mb-3 mt-3" Style="background-color:#003053; color: #FFF" Click="@(async()=> await OpenAddDialogForm("Registar cliente"))" />
<RadzenTextBox Placeholder="Presiona ENTER al buscar" Change="@(async(e) => await GetWithSearch(e))" />

<RadzenDataGrid Data="Costumers"
                TItem="Costumer"
                Responsive="true"
                AllowColumnResize="true">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Costumer"
                              Title="Identificador">
            <Template Context="data">
                @data.Id.ToString("D3")
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Costumer"
                              Title="Cédula"
                              Property="NumberId">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Costumer"
                              Property="FullName"
                              Title="Nombre Completo">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Costumer"
                              Property="Phone"
                              Title="Teléfono">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Costumer"
                              Property="Address"
                              Title="Dirección">
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="Costumer"
                              Title="Fecha de Creación"
                              Width="220px">
            <Template Context="date">
                @date.CreatedAt.ToString("dd/MM/yyyy hh:mm")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Costumer"
                              Title="Acciones"
                              Context="data"
                              TextAlign="TextAlign.Center">
            <Template>
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Click="@(async() => await OpenEditDialogForm("Editar inventario", data))" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(async() => await Delete(data.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<RadzenPager PageSize="BaseResponse.PageSize"
             Count="BaseResponse.TotalItems"
             PageChanged="@(async(e) => await PageIndexChanged(e.PageIndex))"
             PageSizeOptions="PageSizeOptions"
             PageSizeText="registros por página"
             HorizontalAlign="HorizontalAlign.Left"
             PageSizeChanged="@(async(e) => await PageSizeChanged(e))"
             ShowPagingSummary="true"
             PagingSummaryFormat="@pagingSummaryFormat">
</RadzenPager>


@if (IsLoading)
{
    <LoadingOverlay />
}

@code {
    private BaseResponseModel<Costumer> BaseResponse { get; set; } = new BaseResponseModel<Costumer>();
    private List<Costumer> Costumers { get; set; } = new List<Costumer>();
    private IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 5, 10, 20, 50 };

    private string pagingSummaryFormat = "Desplegando página {0} de {1} total {2} registros";
    private int PageSize { get; set; } = 5;
    private int PageIndex { get; set; } = 1;

    private bool IsFiltered { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private string Search { get; set; } = "";

    private async Task LoadData(int pageIndex, int pageSize = 5)
    {
        Search = string.Empty;
        BaseResponse = await _costumerService.GetCostumersPaged(pageIndex, pageSize);
        Costumers = BaseResponse.Items;
    }

    private async Task OpenAddDialogForm(string title)
    {
        var action = await DialogService.OpenAsync<CostumerForm>(title,
        new Dictionary<string, object>
        {
            { "FormMode", Common.FormMode.ADD }
        },
        new DialogOptions
        {
            Width = "auto"
        });

        var isLoad = action == null ? false : true;

        if (isLoad)
        {
            IsLoading = true;
            await LoadData(PageIndex, PageSize);

            await Task.Delay(1000);
            IsLoading = false;
        }
    }

    private async Task OpenEditDialogForm(string title, Costumer costumer)
    {
        var action = await DialogService.OpenAsync<CostumerForm>(title,
        new Dictionary<string, object>
                {
                    { "FormMode", Common.FormMode.EDIT },
                    { "CostumerParameter", costumer }
                },
        new DialogOptions
            {
                Width = "auto",
            });

        var isLoad = action == null ? false : true;

        if (isLoad)
        {
            IsLoading = true;
            await LoadData(PageIndex, PageSize);

            await Task.Delay(1000);
            IsLoading = false;
        }
    }

    private async Task GetWithSearch(string search)
    {
        IsFiltered = true;
        Search = search;

        if (Search == "")
        {
            IsFiltered = false;
            await LoadData(PageIndex, PageSize);
            return;
        }
        else
        {
            BaseResponse = await _costumerService.GetCostumersPagedWithSearch(PageIndex, PageSize, search);
            Costumers = BaseResponse.Items;
        }
    }

    private async Task PageIndexChanged(int pageIndex)
    {
        PageIndex = pageIndex + 1;

        if (IsFiltered)
        {
            await GetWithSearch(Search);
        }
        else
        {
            await LoadData(PageIndex, PageSize);
        }
    }

    private async Task PageSizeChanged(int pageSize)
    {
        PageSize = pageSize;

        if (IsFiltered)
        {
            await GetWithSearch(Search);
        }
        else
        {
            await LoadData(PageIndex, PageSize);
        }
    }

    private async Task Delete(int id)
    {
        var isConfirmed = await SweetAlertServices.ShowWarningAlert("¿Estás seguro de eliminar este registro?", "Verifica que este registro sea el que quieres eliminar");

        if (isConfirmed)
        {
            var action = await _costumerService.DeleteCostumer(id);

            if (!action.IsSuccessStatusCode)
            {
                await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
            }
            else
            {
                if (Costumers.Count == 1 && PageIndex != 1)
                {
                    PageIndex -= 1;
                    await LoadData(PageIndex, PageSize);
                }
                else
                {
                    await LoadData(PageIndex, PageSize);
                }

                await SweetAlertServices.ShowSuccessAlert("Registro eliminado", "El registro se eliminó correctamente");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadData(PageIndex);

        await Task.Delay(1000);
        IsLoading = false;
    }
}
