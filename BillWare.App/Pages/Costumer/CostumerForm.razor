@inject ICostumerService _costumerService
@inject DialogService DialogService

<RadzenTemplateForm TItem="Costumer"
                    Data="@Costumer"
                    Submit="OnSubmit">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <RadzenLabel Text="Nombre Completo"></RadzenLabel>
                <RadzenTextBox Name="Name" @bind-Value="@Costumer.FullName" class="form-control" />
                <RadzenRequiredValidator Component="Name" Text="Introducir nombre" Popup="true" Style="position: absolute" />
            </div>
            <div class="form-group">
                <RadzenLabel Text="Teléfono" class="mt-3"></RadzenLabel>
                <RadzenTextBox Name="Phone" @bind-Value="@Costumer.Phone" class="form-control" />
                <RadzenRequiredValidator Component="Phone" Text="Introducir telefono" Popup="true" Style="position: absolute" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <RadzenLabel Text="Dirección"></RadzenLabel>
                <RadzenTextBox Name="Address" @bind-Value="@Costumer.Address" class="form-control" />
                <RadzenRequiredValidator Component="Address" Text="Introducir dirección" Popup="true" Style="position: absolute" />
            </div>
            <div class="form-group">
                <RadzenLabel Text="Cédula" class="mt-3"></RadzenLabel>
                <RadzenTextBox Name="NumberId" @bind-Value="@Costumer.NumberId" class="form-control" />
                <RadzenRequiredValidator Component="NumberId" Text="Introducir cédula" Popup="true" Style="position: absolute" />
            </div>
        </div>
    </div>
    <div class="form-group text-center mt-3">
        <RadzenButton Text="@ButtonTitle" ButtonType="ButtonType.Submit" Style="background-color:#003053; color: #FFF" />
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public Common.FormMode FormMode { get; set; }

    [Parameter] public Costumer CostumerParameter { get; set; } = new Costumer();

    private Costumer Costumer = new Costumer();
    private string ButtonTitle => FormMode == Common.FormMode.ADD ? "Agregar" : "Editar";

    private async Task OnSubmit()
    {
        if (FormMode == Common.FormMode.ADD)
        {
            await Add();
        }
        else
        {
            await Edit();
        }
    }

    private async Task Add()
    {
        var action = await _costumerService.CreateCostumer(Costumer);

        if (!action.IsSuccessStatusCode)
        {
            await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
        }
        else
        {
            var closeReturn = action != null ? true : false;

            DialogService.Close(closeReturn);
        }
    }

    private async Task Edit()
    {
        var action = await _costumerService.EditCostumer(Costumer);

        var closeReturn = action != null ? true : false;

        DialogService.Close(closeReturn);
    }

    protected override void OnInitialized()
    {
        if (FormMode == Common.FormMode.EDIT)
        {
            Costumer = CostumerParameter;
        }
    }
}
