@using BillWare.Application.Billing.Models;

@page "/billing/index"

@inject IBillingItemService _billingItemService;
@inject IBillingService _billingService;
@inject DialogService DialogService;
@inject IJSRuntime js;

<h3>Facturación</h3>

<hr />

<RadzenButton Text="AGREGAR" class="mb-3 mt-3" Style="background-color:#003053; color: #FFF" Click="@(async() => await OpenAddDialogForm())" />

<RadzenDataGrid Data="Billings"
                TItem="BillingModel"
                Responsive="true"
                AllowColumnResize="true"
                ExpandMode="DataGridExpandMode.Single">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <Template Context="billingItems">
        <RadzenCard Style="margin-bottom:20px">
            productos registrados por el cliente: <b>@billingItems.FullName (@billingItems.BillingItems.Count())   </b>
            <RadzenButton ButtonStyle="ButtonStyle.Warning" Text="Imprimir factura" Click="@(() => PrintInvoice(billingItems))"/>
        </RadzenCard>

        <RadzenDataGrid Data="@billingItems.BillingItems" TItem="BillingItemModel" AllowPaging PageSize="5" @ref="grid">
            <Columns>
                <RadzenDataGridColumn TItem="BillingItemModel" Property="ItemName" Title="Producto" />
                <RadzenDataGridColumn TItem="BillingItemModel" Property="Price" Title="Precio" />
                <RadzenDataGridColumn TItem="BillingItemModel" Property="CreatedAt" Title="Fecha de registro" />

                <RadzenDataGridColumn TItem="BillingItemModel" Title="Acciones" TextAlign="TextAlign.Center">
                    <Template Context="actions">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(async() => await DeleteBillingItem(actions.Id))"/>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </Template>

    <Columns>
        <RadzenDataGridColumn TItem="BillingModel"
                              Property="Id"
                              Title="Identificador">
            <Template Context="data">
                @data.Id?.ToString("D3")
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="BillingModel"
                              Property="FullName"
                              Title="Cliente">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="BillingModel"
                              Property="TotalPrice"
                              Title="Precio total">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="BillingModel"
                              Property="CreatedAt"
                              Title="Fecha de registro">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="BillingModel"
                              Title="Acciones"
                              Context="data"
                              TextAlign="TextAlign.Center">
            <Template Context="actions">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(async() => await Delete(actions.Id))"/>
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Click="@(async() => await OpenEditDialogForm(actions))"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<RadzenPager PageSize="BaseResponse.PageSize"
             Count="BaseResponse.TotalItems"
             PageChanged="@(async(e) => await PageIndexChanged(e.PageIndex))"
             PageSizeOptions="PageSizeOptions"
             PageSizeText="registros por página"
             HorizontalAlign="HorizontalAlign.Left"
             PageSizeChanged="@(async(e) => await PageSizeChanged(e))"
             ShowPagingSummary="true"
             PagingSummaryFormat="@pagingSummaryFormat">
</RadzenPager>

@if (IsLoading)
{
    <LoadingOverlay />
}

@code {
    private BaseResponseModel<BillingModel> BaseResponse { get; set; } = new BaseResponseModel<BillingModel>();
    private List<BillingModel> Billings { get; set; } = new List<BillingModel>();
    private IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 5, 10, 20, 50 };

    RadzenDataGrid<BillingItemModel> grid;

    private bool IsLoading { get; set; } = false;

    private int PageSize { get; set; } = 5;
    private int PageIndex { get; set; } = 1;

    private string pagingSummaryFormat = "Desplegando página {0} de {1} total {2} registros";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadData(PageIndex);

        await Task.Delay(1000);
        IsLoading = false;
    }

    private async Task LoadData(int pageIndex, int pageSize = 5)
    {
        BaseResponse = await _billingService.GetBilling(pageIndex, pageSize);
        Billings = BaseResponse.Items;
    }

    private async Task PageIndexChanged(int pageIndex)
    {
        PageIndex = pageIndex + 1;

        await LoadData(PageIndex, PageSize);
    }

    private async Task PageSizeChanged(int pageSize)
    {
        PageSize = pageSize;

        await LoadData(PageIndex, PageSize);
    }

    private async Task Delete(int? id)
    {
        var confirm = await SweetAlertServices.ShowWarningAlert("¿Está seguro de eliminar este registro?", "Confirma de que este sea el registro que deseas eliminar");

        if (confirm)
        {
            var response = await _billingService.DeleteBilling((int)id);

            if (response.IsSuccessStatusCode)
            {
                await LoadData(PageIndex, PageSize);
                await SweetAlertServices.ShowSuccessAlert("Registro eliminado", "El registro se ha eliminado correctamente");
            }
            else
            {
                await SweetAlertServices.ShowErrorAlert("Error al eliminar", "Ha ocurrido un error al eliminar el registro");
            }
        }
    }

    private async Task DeleteBillingItem(int? id)
    {
        var confirm = await SweetAlertServices.ShowWarningAlert("¿Está seguro de eliminar este item?", "Confirma de que este sea el item que deseas eliminar");

        if (confirm)
        {
            var response = await _billingItemService.DeleteBillingItem((int)id);

            if (response.IsSuccessStatusCode)
            {
                await LoadData(PageIndex, PageSize);
                await SweetAlertServices.ShowSuccessAlert("Item eliminado", "El registro se ha eliminado correctamente");
            }
            else
            {
                await SweetAlertServices.ShowErrorAlert("Error al eliminar", "Ha ocurrido un error al eliminar el registro");
            }
        }
    }

    private async Task PrintInvoice(BillingModel billing)
    {
        var htmlContent = InvoiceToHtml(billing);

        await JSRuntimeInvoke.PrintHtml(js, htmlContent);
    }

    private string InvoiceToHtml(BillingModel invoice)
    {
        var html = $@"
    <style>
    .invoice-box {{
        max-width: 800px;
        margin: auto;
        padding: 30px;
        border: 1px solid #eee;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);
        font-size: 16px;
        line-height: 24px;
        font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;
        color: #555;
    }}
    .invoice-box table {{
        width: 100%;
        line-height: inherit;
        text-align: left;
    }}
    .invoice-box table td {{
        padding: 5px;
        vertical-align: top;
    }}
    .invoice-box table tr td:nth-child(n + 2) {{
        text-align: right;
    }}
    .invoice-box table tr.top table td {{
        padding-bottom: 20px;
    }}
    .invoice-box table tr.top table td.title {{
        font-size: 45px;
        line-height: 45px;
        color: #333;
    }}
    .invoice-box table tr.information table td {{
        padding-bottom: 40px;
    }}
    .invoice-box table tr.heading td {{
        background: #eee;
        border-bottom: 1px solid #ddd;
        font-weight: bold;
    }}
    .invoice-box table tr.details td {{
        padding-bottom: 20px;
    }}
    .invoice-box table tr.item td {{
        border-bottom: 1px solid #eee;
    }}
    .invoice-box table tr.item.last td {{
        border-bottom: none;
    }}
    .invoice-box table tr.item input {{
        padding-left: 5px;
    }}
    .invoice-box table tr.item td:first-child input {{
        margin-left: -5px;
        width: 100%;
    }}
    .invoice-box table tr.total td:nth-child(2) {{
        border-top: 2px solid #eee;
        font-weight: bold;
    }}
    .invoice-box input[type='number'] {{
        width: 60px;
    }}
    @media only screen and (max-width: 600px) {{
        .invoice-box table tr.top table td {{
            width: 100%;
            display: block;
            text-align: center;
        }}
        .invoice-box table tr.information table td {{
            width: 100%;
            display: block;
            text-align: center;
        }}
    }}
    /** RTL **/
    .rtl {{
        direction: rtl;
        font-family: Tahoma, 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;
    }}
    .rtl table {{
        text-align: right;
    }}
    .rtl table tr td:nth-child(2) {{
        text-align: left;
    }}
</style>
    <div class='invoice-box'>
        <table cellpadding='0' cellspacing='0'>
            <tr class='top'>
                <td colspan='4'>
                    <table>
                        <tr>
                            <td class='title'>
                                <h3>Factura</h3>
                            </td>
                            <td>
                                Número de factura: #15225622 <br> Creado por: Hector Almonte
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr class='information'>
                <td colspan='4'>
                    <table>
                        <tr>
                            <td>
                                Santo Domingo<br>Distrito Nacional<br>Calle 1
                            </td>
                            <td>
                                Bill Ware<br> 809-000-0000<br> billware@example.com
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr class='heading'>
                <td colspan='3'>Método de pago</td>
                <td>Costo de facturación</td>
            </tr>
            <tr class='details'>
                <td colspan='3'>Efectivo</td>
                <td>{invoice.TotalPrice}</td>
            </tr>
            <tr class='heading'>
                <td>Producto</td>
                <td>Costo X. Unidad</td>
                <td>Cantidad</td>
                <td>Precio</td>
            </tr>";

        foreach (var item in invoice.BillingItems)
        {
            html += $@"
            <tr class='item'>
                <td>{item.ItemName}</td>
                <td>{item.Price}</td>
                <td>1</td>
                <td>{item.Price}</td>
            </tr>";
        }

        html += $@"
            <tr>
                <td colspan='4'>

                </td>
            </tr>
            <tr class='total'>
                <td colspan='3'></td>
                <td>Total: {invoice.TotalPrice}</td>
            </tr>
        </table>
    </div>";

        return html;
    }

    private async Task OpenAddDialogForm()
    {
        var action = await DialogService.OpenAsync<BillingCreateForm>("Registrar factura"
                        ,options: new DialogOptions
                        {
                            Width="800px",
                            Height="auto",
                            Draggable = true
                        });

        if(action != null)
        {
            if (action)
            {
                await LoadData(PageIndex, PageSize);
            }
        }
    }

    private async Task OpenEditDialogForm(BillingModel billingParameter)
    {
        var action = await DialogService.OpenAsync<BillingEditForm>("Modificar factura"
                        , options: new DialogOptions
                            {
                                Width = "800px",
                                Height = "auto",
                                Draggable = true
                            }
                        , parameters: new Dictionary<string, object>
                        {
                            { "BillingParameter", billingParameter },
                        });

        if (action != null)
        {
            if (action)
            {
                await LoadData(PageIndex, PageSize);
            }
        }
    }
}
