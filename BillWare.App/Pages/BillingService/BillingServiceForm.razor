@inject IBillingServiceService _billingService
@inject DialogService DialogService

<RadzenTemplateForm TItem="BillingServiceModel"
                    Data="@BillingService"
                    Submit="OnSubmit">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <RadzenLabel Text="Nombre"></RadzenLabel>
                <RadzenTextBox Name="Name" @bind-Value="@BillingService.Name" class="form-control" />
                <RadzenRequiredValidator Component="Name" Text="Introducir nombre" Popup="true" Style="position: absolute" />
            </div>
            <div class="form-group">
                <RadzenLabel Text="Precio"></RadzenLabel>
                <RadzenNumeric Name="Price" @bind-Value="@BillingService.Price" class="form-control" />
                <RadzenRequiredValidator Component="Price" Text="Introducir precio" Popup="true" Style="position: absolute" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <RadzenLabel Text="Descripción"></RadzenLabel>
                <RadzenTextBox Name="Description" @bind-Value="@BillingService.Description" class="form-control" />
                <RadzenRequiredValidator Component="Description" Text="Introducir descripción" Popup="true" Style="position: absolute" />
            </div>
        </div>
    </div>
    <div class="form-group text-center mt-3">
        <RadzenButton Text="@ButtonTitle" ButtonType="ButtonType.Submit" Style="background-color:#003053; color: #FFF" />
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public Common.FormMode FormMode { get; set; }

    [Parameter] public BillingServiceModel BillingServiceParameter { get; set; } = new BillingServiceModel();

    private BillingServiceModel BillingService = new BillingServiceModel();

    private string ButtonTitle => FormMode == Common.FormMode.ADD ? "Agregar" : "Editar";

    private async Task OnSubmit()
    {
        if (FormMode == Common.FormMode.ADD)
        {
            await Add();
        }
        else
        {
            await Edit();
        }
    }

    private async Task Add()
    {
        var action = await _billingService.CreateBillingService(BillingService);

        if (!action.IsSuccessStatusCode)
        {
            await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
        }
        else
        {
            var closeReturn = action != null ? true : false;

            DialogService.Close(closeReturn);
        }
    }

    private async Task Edit()
    {
        var action = await _billingService.EditBillingService(BillingService);

        var closeReturn = action != null ? true : false;

        DialogService.Close(closeReturn);
    }

    protected override void OnInitialized()
    {
        if (FormMode == Common.FormMode.EDIT)
        {
            BillingService = BillingServiceParameter;
        }
    }
}
