@inject IAuthService _authService;
@inject NavigationManager _navigationManager;
@inject LocalStorageService _localStorageService;

@page "/account/signin"

<div class="login">
    <h2 class="login-header">Iniciar Sesión</h2>

    <form class="login-container" @onsubmit="HandleLogin">
        <p><input type="email" placeholder="Email" @bind="SignInModel.Email"></p>
        <p><input type="password" placeholder="Password" @bind="SignInModel.Password"></p>
        <p><input type="submit" value="Aceptar"></p>
    </form>
</div>


@if (IsLoading)
{
    <LoadingOverlay IsVisible="IsLoading" />
}

@code
{
    private bool IsLoading { get; set; } = false;

    private LoginModel SignInModel = new LoginModel();

    private async Task HandleLogin()
    {
        IsLoading = true;

        var result = await _authService.LoginAsync(SignInModel);

        if (result.Token != null)
        {
            await _localStorageService.SetItem(Configuration.TOKEN, result.Token);
            await _localStorageService.SetItem(Configuration.ROLE, result.Role);
            await _localStorageService.SetItem("FullName", result.FirstName + " " + result.LastName);

            if (result.Role == "Administrator")
                _navigationManager.NavigateTo("/");
            else
                _navigationManager.NavigateTo("/billing/index");
        }
        else
        {
            await SweetAlertServices.ShowErrorAlert("Error", "Usuario o contraseña incorrectos");
        }

        IsLoading = false;
    }


    protected override async Task OnInitializedAsync()
    {
        var token = await _localStorageService.GetItem(Configuration.TOKEN);

        if (token != null)
        {
            var role = await _localStorageService.GetItem(Configuration.ROLE);

            if (role == "Administrator")
                _navigationManager.NavigateTo("/");
            else
                _navigationManager.NavigateTo("/billing/index");
        }
    }
}
<style>

    body {
        font-family: 'Quicksand', sans-serif;
        color: #E0E0E0;
        background: #003053;
    }

    
.login {
    width: 400px;
    margin: 16px auto;
    font-size: 16px;
}

    /* Reset top and bottom margins from certain elements */
    .login-header,
    .login p {
        margin-top: 0;
        margin-bottom: 0;
    }

.login-header {
    background: #28d;
    padding: 20px;
    font-size: 1.4em;
    font-weight: normal;
    text-align: center;
    text-transform: uppercase;
    color: #fff;
}

.login-container {
    background: #ebebeb;
    padding: 12px;
}

/* Every row inside .login-container is defined with p tags */
.login p {
    padding: 12px;
}

.login input {
    box-sizing: border-box;
    display: block;
    width: 100%;
    border-width: 1px;
    border-style: solid;
    padding: 16px;
    outline: 0;
    font-family: inherit;
    font-size: 0.95em;
}

    .login input[type="email"],
    .login input[type="password"] {
        background: #fff;
        border-color: #bbb;
        color: #555;
    }

        /* Text fields' focus effect */
        .login input[type="email"]:focus,
        .login input[type="password"]:focus {
            border-color: #888;
        }

    .login input[type="submit"] {
        background: #28d;
        border-color: transparent;
        color: #fff;
        cursor: pointer;
    }

        .login input[type="submit"]:hover {
            background: #17c;
        }

        /* Buttons' focus effect */
        .login input[type="submit"]:focus {
            border-color: #05a;
        }

</style>