@inject IVehiculoEntranceService _vehicleEntranceService
@inject IVehicleService _vehicleService
@inject DialogService DialogService

<RadzenTemplateForm Data="@VehicleEntrance"
                    TItem="VehicleEntrance"
                    Submit="OnSubmit">
    <div class="row">
        <RadzenLabel Style="font-size: 20px" class="mb-3" Text="Información del cliente"/>
        <div class="col-md-4">
            <div class="form-group">
                <RadzenLabel Text="Cédula"></RadzenLabel>
                <RadzenTextBox Name="Cedula" @bind-Value="@VehicleEntrance.Costumer.NumberId" class="form-control" />
                <RadzenRequiredValidator Component="Cedula" Text="Introducir cédula" Popup="false" />
                <RadzenRegexValidator Component="Cedula" Text="Formato de cédula inválido" Pattern="^(\d{3}-?\d{7}-?\d{1})$" Popup="false" />
            </div>
            <div class="form-group">
                <RadzenLabel Text="Nombre Completo" class="mt-2"></RadzenLabel>
                <RadzenTextBox Name="Name" @bind-Value="@VehicleEntrance.Costumer.FullName" class="form-control" />
                <RadzenRequiredValidator Component="Name" Text="Introducir nombre" Popup="false" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <RadzenLabel Text="Número de teléfono" class="mt-2"></RadzenLabel>
                <RadzenTextBox Name="Phone" @bind-Value="@VehicleEntrance.Costumer.Phone" class="form-control" />
                <RadzenRequiredValidator Component="Phone" Text="Introducir teléfono" Popup="false" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <RadzenLabel Text="Dirección"></RadzenLabel>
                <RadzenTextBox @bind-Value="@VehicleEntrance.Costumer.Address" class="form-control" />
            </div>
        </div>
    </div>
    <div class="row">
        <RadzenLabel Style="font-size: 20px" class="mb-3 mt-3" Text="Información del vehículo" />
        <div class="col-md-4 mb-3">
            <RadzenButton Text="Agregar vehículo" Style="background-color:#003053; color: #FFF" Click="@(async() => await OpenAddVehicleFormDialog())" />
        </div>
        <RadzenDataGrid Data="VehicleEntrance.Vehicles"
                TItem="Vehicle"
                Responsive
                AllowColumnResize
                @ref="grid"
                AllowPaging="true"
                PageSize="2">
        <Columns>
        <RadzenDataGridColumn TItem="Vehicle" Property="Brand" Title="Marca" />
        <RadzenDataGridColumn TItem="Vehicle" Property="Model" Title="Modelo" />
        <RadzenDataGridColumn TItem="Vehicle" Property="Color" Title="Color" />
        <RadzenDataGridColumn TItem="Vehicle" Property="Year" Title="Año" />
        <RadzenDataGridColumn TItem="Vehicle" Property="Plate" Title="Placa" />
        <RadzenDataGridColumn TItem="Vehicle" Property="Comments" Title="Commentarios" TextAlign="TextAlign.Center">
            <Template Context="vehicle">
                <RadzenButton Icon="launch" Click="@(() => {
                            DialogService.Alert(vehicle.Comments, "Comentarios",
                                new AlertOptions
                                {
                                    ShowClose = false,
                                    OkButtonText = "Cerrar"
                                }
                             );
                        })" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Vehicle" Title="Acciones" TextAlign="TextAlign.Center">
            <Template Context="vehicle">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Warning" Click="@(async() => {
                            await OpenEditVehicleFormDialog(vehicle);
                        })" />

                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(async() => {
                            if(IsFormToDatabase){
                                await DeleteVehicle(vehicle.Id);
                            }else{
                                await DeleteVehicleInstance(vehicle);
                            }
                        })" />
            </Template>
        </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    </div>
    <div class="form-group text-center mt-3">
        <RadzenButton Text="@ButtonTitle" ButtonType="ButtonType.Submit" Style="background-color:#003053; color: #FFF" />
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public Common.FormMode FormMode { get; set; }

    [Parameter]
    public VehicleEntrance VehicleEntranceParameter { get; set; } = new VehicleEntrance();

    [Parameter]
    public bool IsFormToDatabase { get; set; } = false;

    private VehicleEntrance VehicleEntrance = new VehicleEntrance();

    private string ButtonTitle => FormMode == Common.FormMode.ADD ? "Registrar Vehículo" : "Modificar Vehículo";

    RadzenDataGrid<Vehicle> grid = new RadzenDataGrid<Vehicle>();

    private async Task OnSubmit()
    {
        if (FormMode == Common.FormMode.ADD)
        {
            await Add();
        }
        else
        {
            await Edit();
        }
    }

    private async Task Add()
    {
        var action = await _vehicleEntranceService.CreateVehiculoEntrance(VehicleEntrance);

        if (!action.IsSuccessStatusCode)
        {
            await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
        }
        else
        {
            var closeReturn = action != null ? true : false;

            DialogService.Close(closeReturn);
        }
    }

    private async Task Edit()
    {
        var action = await _vehicleEntranceService.EditVehiculoEntrance(VehicleEntrance);

        if (!action.IsSuccessStatusCode)
        {
            await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
        }
        else
        {
            var closeReturn = action != null ? true : false;

            DialogService.Close(closeReturn);
        }
    }

    private async Task OpenAddVehicleFormDialog()
    {
        var dialogResult = await DialogService.OpenAsync<VehicleForm>("Ingresar Vehículo"
                ,options: new DialogOptions
                {
                    Draggable = true
                });

        if (dialogResult != null)
        {
            VehicleEntrance.Vehicles.Add(dialogResult);
            await grid.Reload();
            StateHasChanged();
        }
    }

    private async Task OpenEditVehicleFormDialog(Vehicle vehicleP)
    {
        var dialogResult = await DialogService.OpenAsync<VehicleForm>("Modificar Vehículo"
                , new Dictionary<string, object>() { { "VehicleParameter", vehicleP }, { "FormMode", Common.FormMode.EDIT } }
                , options: new DialogOptions
                {
                    Draggable = true
                });

        if (dialogResult != null)
        {
            var vehicle = VehicleEntrance.Vehicles.FirstOrDefault(x => x.Id == dialogResult.Id);

            if (vehicle != null)
            {
                vehicle.Brand = dialogResult.Brand;
                vehicle.Color = dialogResult.Color;
                vehicle.Comments = dialogResult.Comments;
                vehicle.Model = dialogResult.Model;
                vehicle.Plate = dialogResult.Plate;
                vehicle.Year = dialogResult.Year;
            }

            await grid.Reload();
        }
    }

    private async Task DeleteVehicleInstance(Vehicle vehicleP)
    {
        var vehicle = VehicleEntrance.Vehicles.FirstOrDefault(x => x.Id == vehicleP.Id);

        if (vehicle != null)
        {
            VehicleEntrance.Vehicles.Remove(vehicle);
            await grid.Reload();
            StateHasChanged();
        }
    }

    private async Task DeleteVehicle(int id)
    {
        var action = await _vehicleService.DeleteVehicle(id);

        if (!action.IsSuccessStatusCode)
        {
            await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
        }
        else
        {
            var closeReturn = action != null ? true : false;

            DialogService.Close(closeReturn);
        }
    }

    private void LoadForm()
    {
        if (FormMode == Common.FormMode.EDIT)
        {
            VehicleEntrance = VehicleEntranceParameter;
        }
        else
        {
            VehicleEntrance = new VehicleEntrance();
            VehicleEntrance.Costumer = new Costumer();
            VehicleEntrance.Vehicles = new List<Vehicle>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LoadForm();

        await base.OnInitializedAsync();
    }
}