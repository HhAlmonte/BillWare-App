@page "/vehicleEntrance/index"

@inject IVehiculoEntranceService _vehicleEntranceService;
@inject IVehicleService _vehicleService;
@inject DialogService DialogService;

<h3>Vehiculos de Entrada</h3>

<hr />


<RadzenButton Text="AGREGAR" class="mb-3 mt-3" Style="background-color:#003053; color: #FFF" Click="@(async()=> await OpenAddDialogForm("Registrar Vehículo de Entrada"))"/>
<RadzenTextBox Placeholder="Buscar por Nombre Completo" Change="@(async(e) => await GetBySearch(e))" />

<RadzenDataGrid Data="VehicleEntrance"
                TItem="VehicleEntrance"
                Responsive="true"
                AllowColumnResize="true"
                ExpandMode="DataGridExpandMode.Single">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <Template Context="vehicle">
        <RadzenCard Style="margin-bottom:20px">
            Vehículos ingresados por el cliente: <b>@vehicle.Costumer.FullName (@vehicle.Vehicles.Count())   </b>
            <RadzenButton Text="AGREGAR" Style="background-color:#003053; color: #FFF" Click="@(async() => await OpenAddVehicleDialogForm(vehicle.Id))" />
        </RadzenCard>
        <RadzenDataGrid Data="@vehicle.Vehicles" TItem="Vehicle" AllowPaging PageSize="5" @ref="grid">
            <Columns>
                <RadzenDataGridColumn TItem="Vehicle" Property="Id" Title="Identificador"/>
                <RadzenDataGridColumn TItem="Vehicle" Property="Brand" Title="Marca"/>
                <RadzenDataGridColumn TItem="Vehicle" Property="Model" Title="Modelo"/>
                <RadzenDataGridColumn TItem="Vehicle" Property="Color" Title="Color"/>
                <RadzenDataGridColumn TItem="Vehicle" Property="Year" Title="Año"/>
                <RadzenDataGridColumn TItem="Vehicle" Property="Plate" Title="Placa"/>
                <RadzenDataGridColumn TItem="Vehicle" Property="Comments" Title="Commentarios" TextAlign="TextAlign.Center">
                    <Template Context="context">
                        <RadzenButton Icon="launch" Click="@(() => {
                            DialogService.Alert(context.Comments, "Comentarios", 
                                new AlertOptions 
                                {
                                    ShowClose = false,
                                    OkButtonText = "Cerrar"
                                }
                             );
                        })"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Vehicle" Title="Acciones" TextAlign="TextAlign.Center">
                    <Template Context="vehicleDelete">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(async() => await DeleteVehicle(vehicleDelete.Id))" />
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Click="@(async() => await OpenEditVehicleDialogForm(vehicleDelete))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Property="Costumer.Id"
                              Title="Identificador">
            <Template Context="data">
                @data.Costumer.Id.ToString("D3")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Property="Costumer.FullName"
                              Title="Nombre Completo">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Property="Costumer.Phone"
                              Title="Teléfono">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Property="Costumer.Address"
                              Title="Dirección">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Property="Costumer.NumberId"
                              Title="Cédula">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Title="Fecha de Creación">
            <Template Context="date">
                @date.CreatedAt.ToString("dd/MM/yyyy hh:mm")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleEntrance"
                              Title="Acciones"
                              Context="data"
                              TextAlign="TextAlign.Center">
            <Template>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(async() => await Delete(data.Id))" />
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Click="@(async() => await OpenEditDialogForm("Modificar Vehículo de Entrada", data))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<RadzenPager PageSize="BaseResponse.PageSize"
             Count="BaseResponse.TotalItems"
             PageChanged="@(async(e) => await PageIndexChanged(e.PageIndex))"
             PageSizeOptions="PageSizeOptions"
             PageSizeText="registros por página"
             HorizontalAlign="HorizontalAlign.Left"
             PageSizeChanged="@(async(e) => await PageSizeChanged(e))"
             ShowPagingSummary="true"
             PagingSummaryFormat="@pagingSummaryFormat">
</RadzenPager>


@if (IsLoading)
{
    <LoadingOverlay />
}

@code {
    private BaseResponseModel<VehicleEntrance> BaseResponse { get; set; } = new BaseResponseModel<VehicleEntrance>();
    private List<VehicleEntrance> VehicleEntrance { get; set; } = new List<VehicleEntrance>();
    private IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 5, 10, 20, 50 };
    private bool IsLoading { get; set; } = false;
    private bool IsFiltered { get; set; } = false;
    private string Search { get; set; } = "";
    private string pagingSummaryFormat = "Desplegando página {0} de {1} total {2} registros";

    RadzenDataGrid<Vehicle> grid;

    private int PageSize { get; set; } = 5;
    private int PageIndex { get; set; } = 1;

    private async Task LoadData(int pageIndex, int pageSize = 5)
    {
        BaseResponse = await _vehicleEntranceService.GetVehiculoEntrance(pageIndex, pageSize);
        VehicleEntrance = BaseResponse.Items;
    }

    private async Task GetBySearch(string search)
    {
        bool isInt = int.TryParse(search, out int identificador);

        IsFiltered = true;
        Search = search;

        if (Search == "")
        {
            IsFiltered = false;
            await LoadData(PageIndex, PageSize);
            return;
        }
        else
        {
            BaseResponse = await _vehicleEntranceService.GetVehicleEntranceWithParams(search, PageIndex, PageSize);
            VehicleEntrance = BaseResponse.Items;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadData(PageIndex);

        await Task.Delay(1000);
        IsLoading = false;
    }

    private async Task PageIndexChanged(int pageIndex)
    {
        PageIndex = pageIndex + 1;

        if (IsFiltered)
        {
            await GetBySearch(Search);
        }
        else
        {
            await LoadData(PageIndex, PageSize);
        }
    }

    private async Task PageSizeChanged(int pageSize)
    {
        PageSize = pageSize;

        if (IsFiltered)
        {
            await GetBySearch(Search);
        }
        else
        {
            await LoadData(PageIndex, PageSize);
        }
    }

    private async Task Delete(int id)
    {
        var isConfirmed = await SweetAlertServices.ShowWarningAlert("¿Estás seguro de eliminar este registro?", "Verifica que este registro sea el que quieres eliminar");

        if (isConfirmed)
        {
            var action = await _vehicleEntranceService.DeleteVehiculoEntrance(id);

            if (!action.IsSuccessStatusCode)
            {
                await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
            }
            else
            {
                if(VehicleEntrance.Count == 1 && PageIndex != 1)
                {
                    PageIndex--;

                    await LoadData(PageIndex, PageSize);
                }
                else
                {
                    await LoadData(PageIndex, PageSize);
                }
            }
        }
    }

    private async Task OpenAddDialogForm(string title)
    {
        var action = await DialogService.OpenAsync<VehiculoEntranceForm>(title,
        new Dictionary<string, object>
            {
                { "FormMode", Common.FormMode.ADD }
            },
            new DialogOptions
            {
                Draggable = true,
                Width = "800px",
                Height = "550px",
                Resizable = true
            });

        var isLoad = action == null ? false : true;

        if (isLoad)
        {
            IsLoading = true;
            await LoadData(PageIndex, PageSize);

            await Task.Delay(1000);
            IsLoading = false;
        }
    }

    private async Task OpenEditDialogForm(string title, VehicleEntrance costumer)
    {
        var action = await DialogService.OpenAsync<VehiculoEntranceForm>(title,
        new Dictionary<string, object>
            {
                { "FormMode", Common.FormMode.EDIT },
                { "VehicleEntranceParameter", costumer },
                { "IsFormToDatabase", true }
            },
        new DialogOptions
            {
                Width = "800px",
                Height = "550px",
                Draggable = true,
                Resizable = true
            });

        var isLoad = action == null ? false : true;

        if (isLoad)
        {
            IsLoading = true;
            await LoadData(PageIndex, PageSize);

            await Task.Delay(1000);
            IsLoading = false;
        }
    }

    private async Task DeleteVehicle(int id)
    {
        var isConfirmed = await SweetAlertServices.ShowWarningAlert("¿Estás seguro de eliminar este registro?", "Verifica que este registro sea el que quieres eliminar");

        if (isConfirmed)
        {
            var action = await _vehicleService.DeleteVehicle(id);

            if (!action.IsSuccessStatusCode)
            {
                await SweetAlertServices.ShowErrorAlert("Ocurrió un error", await action.Content.ReadAsStringAsync());
            }
            else
            {
                if (IsFiltered)
                {
                    await GetBySearch(Search);
                }
                else
                {
                    await LoadData(PageIndex, PageSize);
                }
            }
        }
    }

    private async Task OpenEditVehicleDialogForm(Vehicle vehicle)
    {
        await DialogService.OpenAsync<VehicleForm>("Modificar Vehículo"
                , new Dictionary<string, object>() { { "VehicleParameter", vehicle }, { "FormMode", Common.FormMode.EDIT }, { "IsFormToDatabase", true } }
                , options: new DialogOptions
                    {
                        Draggable = true
                    });

        await grid.Reload();
    }

    private async Task OpenAddVehicleDialogForm(int vehicleEntranceEntityId)
    {
        await DialogService.OpenAsync<VehicleForm>("Agregar Vehículo"
                , new Dictionary<string, object>() { { "VehicleEntranceEntityId", vehicleEntranceEntityId }, { "FormMode", Common.FormMode.ADD }, { "IsFormToDatabase", true } }
                , options: new DialogOptions
                    {
                        Draggable = true
                    });
        
        if (IsFiltered)
        {
            await GetBySearch(Search);
        }
        else
        {
            await LoadData(PageIndex, PageSize);
        }
    }
}